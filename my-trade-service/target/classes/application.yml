#app:
#  id: my-trade-service
#apollo:
#  bootstrap:
#    enabled: true
spring:
  application:
    name: my-trade-service
#  pid:
#    file: ${spring.application.name}.pid
#    fail-on-write-error: true
#  cloud:
#    consul:
#      discovery:
#        prefer-ip-address: true
#        instance-id: ${spring.application.name}-${spring.cloud.client.ip-address}-${server.port}
#        health-check-interval: 3s
#  jackson:
#    time-zone: GMT+8
#db配置  start
  datasource:
    url: jdbc:mysql://CHDLXDB06:3306/auth?useSSL=false
    username: mkbiz
    password: MaikeN2@41811
    driverClassName: com.mysql.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    # 连接池扩展配置
    initialSize: 5
    minIdle: 5
    maxActive: 20
    # 配置获取连接等待超时的时间
    maxWait: 45000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 300000
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    # 配置监控统计拦截的filters
    filters: wall,stat
    # mergeSql 统计sql，打开慢sql统计
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=20
#  dubbo:
#    application:
#      id: ${spring.application.name}
#      name: ${spring.application.name}
#    registry:
#      packageName: com.mk.trade
#    server: false
#    protocol:
#      name: dubbo
#  sleuth:
#    sampler:
#      probability: 1.0

#mybatis:
#  mapperLocations: classpath*:mybatis/*.xml

#management:
#  health:
#    mail:
#      enabled: false
#  endpoint:
#    health:
#      show-details: always
#  endpoints:
#    web:
#      exposure:
#        include: "*"
#  metrics:
#    export:
#      simple:
#        enabled: false

#logging:
#  path: log

#feign:
#  hystrix:
#    enabled: true

#hystrix:
#  command:
#    default:
#      execution:
#        isolation:
#          thread:
#            timeoutInMilliseconds: 10000


